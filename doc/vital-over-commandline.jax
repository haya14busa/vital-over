*vital-over-commandline.txt*		独自コマンドラインを定義するフレームワーク

==============================================================================
目次						*vital-over-commandline-contents*

インターフェース		|Vital.Over.Commandline-interface|
  関数				  |Vital.Over.Commandline-functions|
  commandline			  |Vital.Over.Commandline-object|


==============================================================================
インターフェース			*Vital.Over.Commandline-interface*

------------------------------------------------------------------------------
関数					*Vital.Over.Commandline-functions*

make_basic({prompt})			*Vital.Over.Commandline-make_basic()*
	標準のコマンドラインの挙動に準じたコマンドラインオブジェクトを生成しま
	す。
	オブジェクトの内容は |Vital.Over.Commandline-object| を参照して下さ
	い。

make_plain({prompt})			*Vital.Over.Commandline-make_plain()*
	独自のコマンドラインを作りたい場合はこれを元にするとよいでしょう。

make({prompt})				*Vital.Over.Commandline-make()*
	|Vital.Over.Commandline-object| のオブジェクトを生成します。
	NOTE: この関数で生成したオブジェクトは何も行いません。
	キャンセルや実行などもできないので注意して下さい。

==============================================================================
コマンドライン				*Vital.Over.Commandline-object*

CORE					*Vital.Over.Commandline-object-core*

getline()			*Vital.Over.Commandline-object-getline()*
	コマンドラインの文字列を返します

setline({line})			*Vital.Over.Commandline-object-setline()*
    コマンドラインに {line} を設定します

char()					*Vital.Over.Commandline-object-char()*
	入力された文字を返します

setchar({char})			*Vital.Over.Commandline-object-setchar()*
	コマンドラインに挿入される文字{char}を設定します
	コマンドラインに文字を挿入したくない場合は空の文字を設定して下さい

getpos()			*Vital.Over.Commandline-object-getpos()*
    コマンドラインのカーソル位置を返します

setpos({col})			*Vital.Over.Commandline-object-setpos()*
    コマンドラインのカーソル位置を {col} 設定します

is_input({key})			*Vital.Over.Commandline-object-input()*
	{key} が入力されたかどうかを判定します。
	入力されたかどうかの判定は char() と比較するのではなくて is_input() を
	使用して下さい。
Example: >
	" a が押されたら a が変える
    is_input("a")

    " <C-c> が押されたら 1 が変える
    is_input("\<C-c>")
<

forward()			*Vital.Over.Commandline-object-forward()*
	カーソル位置より前方のコマンドラインの文字列を返します。
	カーソル上の文字は含みません。

backward()			*Vital.Over.Commandline-object-backward()*
	カーソル位置より後方のコマンドラインの文字列を返します。
	カーソル上の文字を含みます。

connect({module} [, {name}])	*Vital.Over.Commandline-object-connect()*
	コマンドラインに {name} という名前の {module} を追加します。
	{name} は disconnect() 時に使用されます。
	{name} がなければ {module} の "name" キーの値が使用されます。

disconnect({name})		*Vital.Over.Commandline-object-disconnect()*
	{name} のモジュールを削除します。

start()				*Vital.Over.Commandline-object-start()*
	コマンドラインの入力を開始します。
	コマンドラインが正常終了した場合、入力した文字列を |:execute| で実行し
	ます。

get()				*Vital.Over.Commandline-object-get()*
	コマンドラインの入力を開始します。
	コマンドラインが正常終了した場合に入力された文字列を返します。
	異常終了した場合は空の文字列を返します。


exit([{exitcode}])		*Vital.Over.Commandline-object-exit()*
	コマンドラインを終了します。
	{exitcode} は exit_code() が返す値になります。
	引数がなければ 0 が設定されます。
	また、この関数で終了した場合は on_cancel() は呼び出されません。

exit_code()			*Vital.Over.Commandline-object-exit_code()*
	終了コードを返します。
	0	: 正常終了
	0 以外	: 異常終了(e.g. cancel() が呼ばれた場合など)

cancel()			*Vital.Over.Commandline-object-cancel()*
	コマンドラインを中断します。
	exit() とは違い exit_code に 0 以外が設定され on_cancel() が呼び出され
	ます。
	<Esc> や <C-c> が入力された場合にこの処理で中断されます。

cmap({lhs}, {rhs})		*Vital.Over.Commandline-object-cmap()*
	{lhs} に {rhs} のキーを割り当てます。
Example: >
	call s:my.cmap("\<C-f>", "\<Right>")
	call s:my.cmap("\<C-b>", "\<Left>")
<

cnoremap({lhs}, {rhs})		*Vital.Over.Commandline-object-cnoremap()*
	{lhs} に {rhs} のキーを割り当てます。
	cmap() とは違い再マップされません。

cunmap({lhs})			*Vital.Over.Commandline-object-cunmap()*
	{lhs} に割り当てられたキーマップを削除します。


CALLBACK			*Vital.Over.Commandline-object-callback*

keymapping()			*Vital.Over.Commandline-object-keymapping()*
	キーマッピングの辞書を返します。

on_enter()			*Vital.Over.Commandline-object-on_enter()*
	コマンドラインが開始された時に呼ばれる関数です。

on_leave()			*Vital.Over.Commandline-object-on_leave()*
	コマンドラインが終了された時に呼ばれる関数です

on_char_pre()			*Vital.Over.Commandline-object-on_char_pre()*
	コマンドラインで文字が入力され、コマンドラインに挿入される前にに呼ばれ
	る関数です

on_char()			*Vital.Over.Commandline-object-on_char()*
	コマンドラインで文字が入力され、コマンドラインに挿入された後に呼ばれる
	関数です。

on_execute_pre()		*Vital.Over.Commandline-object-on_execute_pre()*
	コマンドラインでコマンドが実行される直前に呼ばれる関数です。
	コマンドラインが空でも呼ばれます。

on_execute()			*Vital.Over.Commandline-object-on_execute()*
	コマンドラインでコマンドが実行された後に呼ばれる関数です。
	コマンドラインが空でも呼ばれます。

on_execute_failed()	*Vital.Over.Commandline-object-on_execute_failed()*
	コマンドラインでコマンドを実行し、失敗した時に呼ばれる関数です。
	コマンドラインが空でも呼ばれます。

on_cancel()			*Vital.Over.Commandline-object-on_cancel()*
	コマンドラインがキャンセル（<Esc>）された時に呼ばれる関数です。
	exit() で終了された時には呼ばれません。


==============================================================================
キーマッピング				*Vital.Over.Commandline-keymapping*

コマンドライン上での独自のキーマッピングを cmap()/cnoremap()、もしくは辞書で定
義することができます。
定義した辞書は各コマンドラインの |Vital.Over.Commandline-object-keymapping()|
で返すことでそのコマンドラインに反映されます。
辞書はキーに {lrh} を値に {rhs} を設定します。

Example: >
	let s:cmdline  = vital#of("vital").import("Over.Commandline")
	let s:my = s:cmdline.make_basic("$ ")
	
	" キーマッピングを設定する
	function! s:my.keymapping()
		" <C-f> に <Right>
		" <C-b> に <Left> を割り当てる
		return {
	\		"\<C-f>" : "\<Right>",
	\		"\<C-b>" : "\<Left>",
	\	}
	endfunction
<

また、再マップされないようにする場合は次のように {rhs} に辞書を設定して下さ
い。

Example: >
	function! s:my.keymapping()
		" <C-f> は再マップされない
		return {
	\		"\<C-f>" : {
	\			"key" : "\<Right>",
	\			"noremap" : 1,
	\		},
	\		"\<C-b>" : "\<Left>",
	\		"\<Right>" : "\<Left>",
	\	}
	endfunction
<


また、キーマッピングの優先順位は次のようになります。

1．コマンドラインオブジェクトのkeymapping()
2．コマンドラインオブジェクトの cmap()/cnoremap() で追加されたキーマップ
3．各モジュールで定義されているキーマップ

上から順に優先順位が高いです。


==============================================================================
モジュール				*Vital.Over.Commandline-modules*

|Vital.Over.Commandline-object| はモジュールを追加する事でその機能を拡張する事
ができます。
これは以下のように利用することができます。

Example: >
	let s:cmdline     = vital#of("vital").import("Over.Commandline")
	let s:cursor_move = vital#of("vital").import("Over.Commandline.Modules.CursorMove")
	let s:delete      = vital#of("vital").import("Over.Commandline.Modules.Delete")
	
	
	" コマンドラインのオブジェクトを生成
	let s:my = s:cmdline.make_plain("$ ")
	
	
	" 使用したいモジュールを追加
	call s:my.connect(s:cursor_move.make())
	call s:my.connect(s:delete.make())
<
特に記述がない限りは make() を使用してそのモジュールを生成します。
また、<Over> から始まるキーは任意のキーに割り当てて使用します。


名前			機能~
BufferComplete		起動したバッファのワードで補完
Cancel			コマンドラインの中断
CursorMoved		カーソル移動
Delete			文字の削除
Enter			コマンドの実行
HistAdd			|history| への追加
History			コマンド履歴の呼び出し
Incsearch		|incsearch| のような挙動のエミュレート
KeyMapping		キーマッピングの提供
NoInsert		挿入しない文字の処理
Paste			@* の挿入
Scroll			起動したウィンドウのスクロール
InsertRegister		レジスタの内容を挿入


BufferComplete			*Vital.Over.Commandline-modules-BufferComplete*
	起動したバッファ上の単語で補完を行います。

		*Vital.Over.Commandline-modules-BufferComplete-keymapping*
	キー				機能~
	<Over>(buffer-complete)		補完の開始
					次の補完へ移動
	<Right>				補完中であれば次の補完へ移動
	<Left>				補完中であれば前の補完へ移動

Cancel					*Vital.Over.Commandline-modules-Cancel*
	コマンドラインの入力を中断します。

			*Vital.Over.Commandline-modules-Cancel-keymapping*
	キー		機能~
	<Esc>, <C-c>	入力を中断
	<C-h>, <BS>	入力された文字がない場合に中断

CursorMove			*Vital.Over.Commandline-modules-CursorMove*
	カーソル移動を行います。
			*Vital.Over.Commandline-modules-CursorMove-keymapping*
	キー		機能~
	<Right>		カーソルを右に移動
	<Left>		カーソルを右に移動
	<C-b>, <Home>	カーソルを行頭へ移動
	<C-e>, <End>	カーソルを行末へ移動

Delete					*Vital.Over.Commandline-modules-Delete*
	入力された文字の削除を行います。
			*Vital.Over.Commandline-modules-Delete-keymapping*
	キー		機能~
	<C-h>, <BS>	カーソル位置より後ろの1文字を削除
	<C-w>		カーソル位置より後ろの単語を削除
	<C-u>		カーソル位置より後ろの文字を全て削除
	<Del>		カーソル位置上の文字を削除

Enter					*Vital.Over.Commandline-modules-Enter*
	入力された文字を |:execute| で実行します。
			*Vital.Over.Commandline-modules-Enter-keymapping*
	キー			機能~
	<CR>, <NL>, <C-j>	実行

HistAdd					*Vital.Over.Commandline-modules-HistAdd*
	入力された文字を履歴に追加します。
			*Vital.Over.Commandline-modules-HistAdd-function*
	make({mode})
		{mode} に履歴を追加します。
		{mode} の値は |histadd()| と同じです。

History					*Vital.Over.Commandline-modules-History*
	コマンド履歴を挿入します。
			*Vital.Over.Commandline-modules-History-keymapping*
	キー		機能~
	<Up>		前の履歴を挿入
	<Down>		次の履歴を挿入

			*Vital.Over.Commandline-modules-History-function*
	make({mode})
		{mode} の履歴を挿入します。
		{mode} の値は |histadd()| と同じです。

KeyMapping			*Vital.Over.Commandline-modules-KeyMapping*
	キーマッピングを提供します。
			*Vital.Over.Commandline-modules-KeyMapping-function*
	make_emacs()
		Emacs のようなキーマッピングを提供します。

NoInsert			*Vital.Over.Commandline-modules-NoInsert*
	挿入しない文字を設定します。
	また、挿入を行わないだけでキーの入力チェックは行われます。
			*Vital.Over.Commandline-modules-NoInsert-function*
	make_special_chars()
		特殊文字を挿入しない。

Scroll			*Vital.Over.Commandline-modules-Scroll*
	起動したバッファのウィンドウをスクロールします。
			*Vital.Over.Commandline-modules-Scroll-keymapping*
	キー			機能~
	<Over>(scroll-y)	|CTRL-y| と同等
	<Over>(scroll-u)	|CTRL-u| と同等
	<Over>(scroll-f)	|CTRL-f| と同等
	<Over>(scroll-e)	|CTRL-e| と同等
	<Over>(scroll-d)	|CTRL-d| と同等
	<Over>(scroll-b)	|CTRL-b| と同等

InsertRegister			*Vital.Over.Commandline-modules-InsertRegister*
	レジスタの内容を挿入します。
		*Vital.Over.Commandline-modules-InsertRegister-keymapping*
	キー			機能~
	<C-r> {0-9a-z"%#:-=.}	レジスタの内容を挿入 |c_CTRL-R|
	<C-r> <C-f>		カーソル下のファイル名
	<C-r> <C-w>		カーソル下の word
	<C-r> <C-A>		カーソル下の WORD


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
